from aiogram import types
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
import aiofiles

from config.sites import SITE_HANDLERS as site_handlers
from .state.state import waiting
from db.ModuleControl import ModuleControl
from src.utils.urlchek import URLChecker
from src.modules.media_selector import selector
from src.modules.update_subs import run_subs_update
from templates.phrases import RECOMEND_MSG, agitation_text

from Buttons.inlinebtns import create_users_keyboard, status_edit, spam_mode, url_saver
from db.db import Database
from config.config import ADMIN, bot  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º CHANEL_ID –∏ CHANNEL_ID –∏–∑ bot.py
from config.settings import setup_logger
from src.utils.common import get_log_file
from src.utils.urlchek import URLChecker


logger = setup_logger()

db = Database()
mc = ModuleControl()
admin_id = ADMIN
che—Åker = URLChecker()

async def save_link_handle(message: types.Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    if not user:
        return
    info = await message.answer("üîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.")
    await state.update_data(message=info.message_id, chat_id=info.chat.id) 
    await state.set_state(waiting.save_link)

async def save_link_answer(message: types.Message, state: FSMContext):
    link = message.text
    che—Åker = URLChecker()

    message_data = await state.get_data()
    chat_id = message_data.get('chat_id')
    message_id = message_data.get('message')

    await bot.delete_message(chat_id=chat_id, message_id=message_id)

    for site, (json_file, handler) in site_handlers.items():
        if site in link:
            if che—Åker.check_url(link, filename=json_file):
                message = await message.answer(
                    text=f"‚ùé –°—Å—ã–ª–∫–∞:\n\n{link}\n\n –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    parse_mode="HTML",
                    reply_markup= url_saver(state=False, url=link),
                    disable_web_page_preview=True
                )
            else:
                message = await message.answer(
                    text=f"‚úÖ –°—Å—ã–ª–∫–∞:\n\n{link}\n\n–ù–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                    parse_mode="HTML",
                    reply_markup= url_saver(state=True, url=link),
                    disable_web_page_preview=True
                )
            await state.update_data(link=link, json_file=json_file)  
        else:
            await message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞. –ò–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Å–ª—ã–∫–æ–π")
            await state.clear()
            return

    await state.set_state(waiting.action_link)

async def action_with_link(query: CallbackQuery, state: FSMContext, message: types.Message,):
    data = query.data

    try:
        user_data = await state.get_data()
        link = user_data.get('link')
        json_file = user_data.get('json_file')

        if not link or not json_file:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
            await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
            return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å —Å—Å—ã–ª–∫–æ–π
        if data.startswith("remove_link"):
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
            che—Åker.remove_url(url=link, filename=json_file)
            await query.answer("–°—Å—ã–ª–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.", show_alert=False)
        elif data.startswith("save_link"):
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
            che—Åker.save_url(url=link, filename=json_file)
            await query.answer("–°—Å—ã–ª–∫–∞ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", show_alert=False)
        elif data.startswith("back_from_saver"):
            await query.message.delete()
        else:
            await query.answer("–í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=False)
        await query.message.delete()

    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=False)

    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.clear()

async def send_welcome(message: types.Message):
    user = db.get_user(message.from_user.id)
    if not user:
        return
    await message.answer("–ü—Ä–∏–≤–µ—Ç!\n\n –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/posting - –ø–æ—Å—Ç–Ω–∏–≥ –≤ –∫–∞–Ω–∞–ª\n/subs - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –ë–î\n/spam - –°–ø–∞–º –≤ –∞–Ω–æ–Ω —á–∞—Ç\n/users - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞\n/join - –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

async def subsupdate_handler(message: types.Message):
    await message.answer("–ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –Ω–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ –ë–î.")
    await run_subs_update(message.from_user.id)
    
async def log_file_handler(message: types.Message):
    await message.answer("–í—ã–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥-—Ñ–∞–π–ª.")
    latest_log_file = await get_log_file()
    if latest_log_file:
        try:
            async with aiofiles.open(latest_log_file, 'rb') as log_file:
                await bot.send_document(chat_id=message.chat.id, document=FSInputFile(f"{latest_log_file}"), caption="–í–æ—Ç –≤–∞—à –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥-—Ñ–∞–π–ª:")
        except Exception as e:
            await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ª–æ–≥-—Ñ–∞–π–ª.")

async def manage_users(message: types.Message):
    if message.from_user.id == admin_id:
        await message.answer("–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=create_users_keyboard())
    else:
        return

async def delete_user_callback(query: CallbackQuery):
    user_id = int(query.data.split(":")[1])
    db.remove_user(user_id)
    await query.message.edit_reply_markup(reply_markup=create_users_keyboard())
    await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω.")

    await query.message.delete()

async def status_posting(message: types.Message):
    user = db.get_user(message.from_user.id)
    if not user:
        return

    current_status = mc.get_module_status('VideoScheduler')

    if current_status == True:
        status = "–í–∫–ª."
        text_edit = "–í—ã–∫–ª"
        edit_status = False
    else:
        status = "–í—ã–∫–ª"
        text_edit = "–í–∫–ª"
        edit_status = True
    await message.answer(f"–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: {status}\n", reply_markup=status_edit(text_edit, edit_status))

async def status_spam(message: types.Message):
    user = db.get_user(message.from_user.id)
    if not user:
        return
    
    current_status = mc.get_module_status('SpamAnonChat')

    if current_status == True:
        status = "–í–∫–ª."
        text_edit = "–í—ã–∫–ª"
        edit_status = False
    else:
        status = "–í—ã–∫–ª"
        text_edit = "–í–∫–ª"
        edit_status = True
    await message.answer(f"–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏: {status}", reply_markup=spam_mode(text_edit, edit_status))
    
async def edit_status_spam(query: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ callback_data
    new_status = query.data.split('_')[2] == 'True'


    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    mc.update_module_status('SpamAnonChat', new_status)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    status_text = "–í–∫–ª." if new_status else "–í—ã–∫–ª"
    button_text = "–í—ã–∫–ª" if new_status else "–í–∫–ª"

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
    await query.message.edit_text(f"–°—Ç–∞—Ç—É—Å —Ä–∞—Å—Å—ã–ª–∫–∏: {status_text}", reply_markup=spam_mode(button_text, not new_status))

    await query.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    await query.message.answer(f"–°—Ç–∞—Ç—É—Å –°–ø–∞–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {status_text}")

    turn = mc.get_module_status('SpamAnonChat')
    if turn == True:
        pass
    else: 
        pass

async def edit_status_module(query: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∏–∑ callback_data
    new_status = query.data.split('_')[2] == 'True'

    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ ModuleControl
    mc = ModuleControl()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    mc.update_module_status('VideoScheduler', new_status)

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    status_text = "–í–∫–ª." if new_status else "–í—ã–∫–ª"
    button_text = "–í—ã–∫–ª" if new_status else "–í–∫–ª"
    reply_markup = status_edit(button_text, not new_status)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
    await query.message.edit_text(f"–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥: {status_text}", reply_markup=reply_markup)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
    await query.answer("–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω.")
    
    await query.message.delete()

async def start_link_post(query: CallbackQuery, state: FSMContext):
    await query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.")
    await state.set_state(waiting.waiting_video_link)

async def handle_caption_post(query: CallbackQuery, state: FSMContext):
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞.\n\n–ë–æ—Ç –ø–æ–¥—Å—Ç–∞–≤–∏—Ç –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ.")
    await state.set_state(waiting.any_post)

async def caption_text_post(message: types.Message, state: FSMContext):

    if message.text == "0":
        await selector(TEXT=RECOMEND_MSG)
        await message.answer("–ü–æ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        return
    elif message.text == "1":
        await selector(TEXT=agitation_text)
        await message.answer("–ü–æ—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        return
    else:
        text = message.text
        await selector(TEXT=text)
        await state.clear()

async def any_post(query: CallbackQuery, state: FSMContext):
    await query.message.answer("–†–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–æ—Å—Ç–∞.\n\n–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Å—Ç–∏–Ω–≥—É –≤ –∫–∞–Ω–∞–ª. (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
    # await state.set_state(waiting.any_post)


from aiogram import types
from aiogram.fsm.context import FSMContext
from src.utils.urlchek import URLChecker

from src.modules.media_selector import selector
from src.utils.common import find_metadata
from src.modules.video_uploader import upload_videos
from templates.phrases import RECOMEND_MSG
from config.config import bot
from config.sites import SITE_HANDLERS as site_handlers

from config.settings import setup_logger

logger = setup_logger()
che—Åker = URLChecker() 

async def handle_user_link(message: types.Message, state: FSMContext):
    user_links = [link.strip() for link in message.text.splitlines() if link.strip()]
    total_links = len(user_links)
    processed_links = 0
    failed_links = []

    progress_message = await message.answer(
        f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Å—ã–ª–æ–∫. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_links} –∏–∑ {total_links}..."
    )

    for user_link in user_links:
        progress_text = (
            f"üì§ <b>–ü–æ—Å—Ç–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å...</b>\n\n"
            f"üîó <b>–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞:</b> {user_link}\n"
            f"‚úÖ <b>–í—ã–≥—Ä—É–∂–µ–Ω–æ:</b> {processed_links} –∏–∑ {total_links}\n"
        )

        await progress_message.edit_text(progress_text, disable_web_page_preview=True, parse_mode='HTML')

        
        for site, (json_file, handler) in site_handlers.items():
            if site in user_link:
                if che—Åker.check_url(user_link, filename=json_file):
                    video_data = await find_metadata(user_link)
                    if video_data is not None:
                        await upload_videos(video_info=video_data)
                        processed_links += 1
                    else:
                        success = await handler(user_link, chat_id=message.chat.id)
                        if success is True:
                            che—Åker.save_url(user_link, filename=json_file)
                            processed_links += 1
                        else:
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É: {user_link}")
                            failed_links.append(user_link)
                else:
                    await bot.send_message(
                        text=f"–í–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ {user_link} —É–∂–µ –±—ã–ª–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ. –°—Å—ã–ª–∫–∞ –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.",
                        chat_id=message.chat.id,
                        disable_web_page_preview=True
                    )
                break
        else:
            await message.answer(f"–°—Å—ã–ª–∫–∞ '{user_link}' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–∞–π—Ç–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")

    if processed_links > 10:
        await selector(TEXT=RECOMEND_MSG)

    await state.clear()

    if failed_links:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        failed_links_text = "\n".join(failed_links)  # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Å—Å—ã–ª–∫–∞–º–∏
        await progress_message.edit_text(
            f"‚úÖ*–ü–æ—Å—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"
            f"‚¨ÜÔ∏è –í—ã–≥—Ä—É–∂–µ–Ω–æ {processed_links} –≤–∏–¥–µ–æ.\n\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å—Å—ã–ª–∫–∏:\n{failed_links_text}",
            disable_web_page_preview=True,
            parse_mode="Markdown"
        )
    else:
        await progress_message.edit_text(
                f"‚úÖ*–ü–æ—Å—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"
                f"‚¨ÜÔ∏è –í—ã–≥—Ä—É–∂–µ–Ω–æ {processed_links} –≤–∏–¥–µ–æ.",
                disable_web_page_preview=True,
                parse_mode="Markdown"
            )


    processed_links = 0
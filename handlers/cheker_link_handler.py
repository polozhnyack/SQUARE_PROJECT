from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram import types
from .state.state import waiting

from src.utils.urlchek import URLChecker
from db.db import Database
from Buttons.inlinebtns import url_saver
from config.config import bot
from config.sites import SITE_HANDLERS as site_handlers
from config.settings import setup_logger

db = Database()
che—Åker = URLChecker()
logger = setup_logger()

async def save_link_handle(message: types.Message, state: FSMContext):
    user = db.get_user(message.from_user.id)
    if not user:
        return
    info = await message.answer("üîó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.")
    await state.update_data(message=info.message_id, chat_id=info.chat.id) 
    await state.set_state(waiting.save_link)

async def save_link_answer(message: types.Message, state: FSMContext):
    link = message.text
    che—Åker = URLChecker()

    message_data = await state.get_data()
    chat_id = message_data.get('chat_id')
    message_id = message_data.get('message')

    await bot.delete_message(chat_id=chat_id, message_id=message_id)

    for site, json_file in site_handlers.items():
        if site in link:
            if che—Åker.check_url(link, filename=json_file):
                message = await message.answer(
                    text=f"‚ùé –°—Å—ã–ª–∫–∞:\n\n{link}\n\n –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö.\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    parse_mode="HTML",
                    reply_markup= url_saver(state=False, url=link),
                    disable_web_page_preview=True
                )
            else:
                message = await message.answer(
                    text=f"‚úÖ –°—Å—ã–ª–∫–∞:\n\n{link}\n\n–ù–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ",
                    parse_mode="HTML",
                    reply_markup= url_saver(state=True, url=link),
                    disable_web_page_preview=True
                )
            await state.update_data(link=link, json_file=json_file)  
            break
        else:
            await message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞. –ò–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Å–ª—ã–∫–æ–π")
            await state.clear()
            return

    await state.set_state(waiting.action_link)

async def action_with_link(query: CallbackQuery, state: FSMContext):
    data = query.data

    try:
        user_data = await state.get_data()
        link = user_data.get('link')
        json_file = user_data.get('json_file')

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å —Å—Å—ã–ª–∫–æ–π
        if data.startswith("remove_link"):
            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
            che—Åker.remove_url(url=link, filename=json_file)
            await query.answer("–°—Å—ã–ª–∫–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.", show_alert=False)
        elif data.startswith("save_link"):
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏
            che—Åker.save_url(url=link, filename=json_file)
            await query.answer("–°—Å—ã–ª–∫–∞ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", show_alert=False)
        else:
            await query.answer("–í—ã—Ö–æ–¥ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏", show_alert=False)
        await query.message.delete()

    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=False)

    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.clear()
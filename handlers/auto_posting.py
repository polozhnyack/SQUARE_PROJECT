from aiogram import types
from aiogram.fsm.context import FSMContext
from src.utils.urlchek import URLChecker

from src.modules.media_selector import selector
from templates.phrases import RECOMEND_MSG
from config.config import bot
from auto_links import autoposting

from config.settings import setup_logger

logger = setup_logger()
che—Åker = URLChecker() 

async def auto_link(query: types.CallbackQuery, state: FSMContext):

    links = await autoposting()
    if not links:
        await bot.send_message(
            chat_id=query.from_user.id,
            text="–ù–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        )
    else:
        user_links = "\n".join([str(autolink).strip() for autolink in links])
        await bot.send_message(
            chat_id=query.from_user.id,
            text=f"–ü–æ–ª—É—á–µ–Ω–æ —Å—Å—ã–ª–æ–∫: {len(links)}\n\n{user_links}",
            disable_web_page_preview=True
        )

    processed_links = 0
    failed_links = []
    total_links = len(links)

    progress_message = await bot.send_message(
        chat_id=query.from_user.id,
        text = f"–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Å—ã–ª–æ–∫. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_links} –∏–∑ {total_links}..."
    )

    # –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–µ
    for user_link in links:
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–∏—à–Ω–∏—Ö –æ—à–∏–±–æ–∫
        user_link = user_link.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è
        if not user_link:
            continue

        progress_text = (
            f"üì§ *–ü–æ—Å—Ç–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å...*\n\n"
            f"üîó *–¢–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞:* `{user_link}`\n"
            f"‚úÖ *–í—ã–≥—Ä—É–∂–µ–Ω–æ:* {processed_links} –∏–∑ {total_links}\n"
        )
        
        await progress_message.edit_text(
            progress_text,
            disable_web_page_preview=True,
            parse_mode="Markdown"
        )

        message = query.message

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∞–π—Ç–∞ sslkn
        if "sslkn" in user_link:
            if che—Åker.check_url(user_link, filename="JSON/sslkn.json"):
                # succes = await sosalkino(user_link, chat_id=message.chat.id)
                if True:
                    che—Åker.save_url(user_link, filename="JSON/sslkn.json")
                    processed_links += 1
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É: {user_link}")
                    failed_links.append(succes)
            else:
                await bot.send_message(text=f"–í–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ {user_link} —É–∂–µ –±—ã–ª–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ. –°—Å—ã–ª–∫–∞ –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.", chat_id=message.chat.id)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–∞–π—Ç–∞ porno365
        elif "porno365" in user_link:
            if che—Åker.check_url(user_link, filename="JSON/p365.json"):
                # result = await porno365(chat_id=message.chat.id, link=user_link)

                if True:
                    che—Åker.save_url(user_link, filename="JSON/p365.json")
                    processed_links += 1
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É: {user_link}")
                    failed_links.append(result) 
            else: 
                await bot.send_message(text=f"–í–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ {user_link} —É–∂–µ –±—ã–ª–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ. –°—Å—ã–ª–∫–∞ –±—ã–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.", chat_id=message.chat.id)
        else:
            await message.answer(f"–°—Å—ã–ª–∫–∞ '{user_link}' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–∞–π—Ç–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.")


    if processed_links > 10:
        await selector(TEXT=RECOMEND_MSG)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫

    await state.clear()
    # await progress_message.edit_text(f"‚úÖ*–ü–æ—Å—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n ‚¨ÜÔ∏è –í—ã–≥—Ä—É–∂–µ–Ω–æ {processed_links} –≤–∏–¥–µ–æ. ")

    if failed_links:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        failed_links_text = "\n".join(failed_links)  # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Å—Å—ã–ª–∫–∞–º–∏
        await progress_message.edit_text(
            f"‚úÖ*–ü–æ—Å—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"
            f"‚¨ÜÔ∏è –í—ã–≥—Ä—É–∂–µ–Ω–æ {processed_links} –≤–∏–¥–µ–æ.\n\n"
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Å—Å—ã–ª–∫–∏:\n{failed_links_text}",
            disable_web_page_preview=True,
            parse_mode="Markdown"
        )
    else:
        await progress_message.edit_text(
                f"‚úÖ*–ü–æ—Å—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!*\n\n"
                f"‚¨ÜÔ∏è –í—ã–≥—Ä—É–∂–µ–Ω–æ {processed_links} –≤–∏–¥–µ–æ.",
                disable_web_page_preview=True,
                parse_mode="Markdown"
            )


    processed_links = 0